<#@ template visibility="internal" #>
<#@ import namespace="CodeGeneration.ApiClientsCodeGenerator.Converters.Ios" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var members = type.GetDataMembers().ToArray();
	var hasBaseClass = type.BaseType != typeof(object);
	var declaredMembers = members.Where(item => item.DeclaringType == type);
	var inheritedMembers = members.Where(item => item.DeclaringType != type);
	var constructorArguments = members.Select(item => $"{item.Name.ToCamelCase()}: {converter.GetClassPropertyTypeName(item)}");
	var baseConstructorParams = inheritedMembers.Select(item => item.Name.ToCamelCase() + ": " + item.Name.ToCamelCase());
#>
public class <#= converter.GetTypeName(type, false).Replace(",", ": Codable,").Replace(">", ": Codable>") #>: <#= hasBaseClass ? converter.GetTypeName(type.BaseType, false, type.BaseType.CanGenericArgumentsBeNull()) : "Codable" #> {
<#
	if (declaredMembers.Any())
	{
		foreach (var member in declaredMembers)
		{
			var defaultValue = converter.GetPropertyDefaultValue(member);
#>
	public var <#= member.Name.ToCamelCase() #>: <#= converter.GetClassPropertyTypeName(member) #><#= defaultValue != "nil" ? " = " + defaultValue : "" #>
<#
		}
#>

<#
	}
	if (declaredMembers.Any() || !hasBaseClass)
	{
#>
	public<#= hasBaseClass ? " override" : ""#> init() {
<#
		if (hasBaseClass)
		{
#>
		super.init()
<#
		}
#>
	}
<#
	}
#>
<#
	if (declaredMembers.Any())
	{
#>

	public init(<#= string.Join(", ", constructorArguments) #>) {
<#
		foreach (var member in declaredMembers)
		{
#>
		self.<#= member.Name.ToCamelCase() #> = <#= member.Name.ToCamelCase() #>
<#
		}
		if (hasBaseClass)
		{
#>		super.init(<#= string.Join(", ", baseConstructorParams) #>)
<#
		}
#>	}
<#
		if (hasBaseClass)
		{
#>
 
	public required init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
<#
			foreach (var member in declaredMembers)
			{
				var propertyTypeName = converter.GetClassPropertyTypeName(member);
				var isOptional = propertyTypeName.EndsWith("?");
#>
		<#= member.Name.ToCamelCase() #> = try container.decode<#= isOptional ? "IfPresent" : "" #>(<#= isOptional ? propertyTypeName.Substring(0, propertyTypeName.Length - 1) : propertyTypeName #>.self, forKey: .<#= member.Name.ToCamelCase() #>)
<#
			}
#>		try super.init(from: decoder)
	}

	public override func encode(to encoder: Encoder) throws {
		try super.encode(to: encoder)
		var container = encoder.container(keyedBy: CodingKeys.self)
<#
			foreach (var member in declaredMembers)
			{
#>
		try container.encode(<#= member.Name.ToCamelCase() #>, forKey: .<#= member.Name.ToCamelCase() #>)
<#
			}
#>	}

	private enum CodingKeys: String, CodingKey {
<#
			foreach (var member in declaredMembers)
			{
#>
		case <#= member.Name.ToCamelCase() #>
<#
			}
#>	}
<#
		}
	}
#>}
<#+
	private IosConverter converter;
	private Type type;
	internal ClassTemplate(IosConverter converter, Type type)
	{
		this.converter = converter;
		this.type = type;
	}
#>