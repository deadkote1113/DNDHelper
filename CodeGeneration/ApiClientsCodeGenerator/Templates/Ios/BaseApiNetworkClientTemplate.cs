// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGeneration.ApiClientsCodeGenerator.Templates.Ios
{
    using CodeGeneration.ApiClientsCodeGenerator.Converters.Ios;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Ios\BaseApiNetworkClientTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal partial class BaseApiNetworkClientTemplate : BaseApiNetworkClientTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 3 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Ios\BaseApiNetworkClientTemplate.tt"

	if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Reactive))
	{

            
            #line default
            #line hidden
            this.Write("import RxSwift\r\n\r\n");
            
            #line 9 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Ios\BaseApiNetworkClientTemplate.tt"

	}

            
            #line default
            #line hidden
            this.Write("public class BaseApiNetworkClient {\r\n\tvar configuration: ApiNetworkClientConfigur" +
                    "ation\r\n\t\r\n\tpublic init(_ configuration: ApiNetworkClientConfiguration? = nil) {\r" +
                    "\n\t\tself.configuration = configuration ?? ApiNetworkClientConfiguration.default\r\n" +
                    "\t}\r\n\t\r\n");
            
            #line 19 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Ios\BaseApiNetworkClientTemplate.tt"

	if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Asynchronous))
	{

            
            #line default
            #line hidden
            this.Write(@"	func makeRequestAsync<TRequest: Encodable, TResponse: Decodable>(method: String, address: String, request: TRequest?, accessToken: String?, callback: ((TResponse?, Error?) -> Void)?) {
		DispatchQueue.global().async {
			do {
				let urlRequest = try self.prepareNetworkRequest(method: method, address: address, request: request, accessToken: accessToken)
				URLSession.shared.dataTask(with: urlRequest) { (data, response, error) in
					self.processNetworkResponse(urlRequest: urlRequest, data: data, response: response, error: error) { response, error in
						self.executeCallbackOnMainThread(callback, response: response, error: error)
					}
				}.resume()
			} catch {
				self.executeCallbackOnMainThread(callback, response: nil, error: error)
			}
		}
	}

");
            
            #line 38 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Ios\BaseApiNetworkClientTemplate.tt"

	}
	if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Reactive))
	{

            
            #line default
            #line hidden
            this.Write(@"	func makeRequestRx<TRequest: Encodable, TResponse: Decodable>(method: String, address: String, request: TRequest?, accessToken: String?) -> Observable<TResponse> {
		return Observable.create { subscriber in
			var task: URLSessionDataTask?
			do {
				let urlRequest = try self.prepareNetworkRequest(method: method, address: address, request: request, accessToken: accessToken)
				task = URLSession.shared.dataTask(with: urlRequest) { (data, response, error) in
					self.processNetworkResponse(urlRequest: urlRequest, data: data, response: response, error: error) { (response: TResponse?, error: Error?) in
						if let error = error {
							subscriber.onError(error)
						} else {
							subscriber.onNext(response!)
							subscriber.onCompleted()
						}
					}
				}
				task?.resume()
			} catch {
				subscriber.onError(error)
			}
			return Disposables.create {
				task?.cancel()
			}
		}.subscribe(on: ConcurrentDispatchQueueScheduler(qos: .default))
	}
	
");
            
            #line 68 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Ios\BaseApiNetworkClientTemplate.tt"

	}
	if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Synchronous))
	{

            
            #line default
            #line hidden
            this.Write(@"	
	func makeRequestSync<TRequest: Encodable, TResponse: Decodable>(method: String, address: String, request: TRequest?, accessToken: String?) throws -> TResponse {
		var resultingResponse: TResponse?
		var resultingError: Error?
		let group = DispatchGroup()
		let urlRequest = try prepareNetworkRequest(method: method, address: address, request: request, accessToken: accessToken)
		group.enter()
		URLSession.shared.dataTask(with: urlRequest) { (data, response, error) in
			self.processNetworkResponse(urlRequest: urlRequest, data: data, response: response, error: error) { (response: TResponse?, error: Error?) in
				resultingResponse = response
				resultingError = error
				group.leave()
			}
		}.resume()
		group.wait()
		if let error = resultingError {
			throw error
		}
		return resultingResponse!
	}

");
            
            #line 93 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Ios\BaseApiNetworkClientTemplate.tt"

	}

            
            #line default
            #line hidden
            this.Write("\t\r\n\tprivate func prepareNetworkRequest<TRequest: Encodable>(method: String, addre" +
                    "ss: String, request: TRequest?, accessToken: String?) throws -> URLRequest {\r\n\t\t" +
                    "guard let url = URL(string: configuration.getRequestAddress(relativeAddress: add" +
                    "ress)) else {\r\n\t\t\tthrow CustomError(message: \"Incorrect URL\")\r\n\t\t}\r\n\t\tvar urlReq" +
                    "uest = URLRequest(url: url)\r\n\t\tlet requestData = request != nil ? try BaseApiNet" +
                    "workClient.getDefaultEncoder().encode(request) : nil\r\n\t\tif configuration.printRe" +
                    "quest {\r\n\t\t\tprint(\"Sending \\(method) request to \\(url.absoluteString)\\(requestDa" +
                    "ta != nil ? \", body=\" + (String(data: requestData!, encoding: .utf8) ?? \"\") : \"\"" +
                    ")\")\r\n\t\t}\r\n\t\turlRequest.cachePolicy = .reloadIgnoringLocalAndRemoteCacheData\r\n\t\tu" +
                    "rlRequest.httpBody = requestData\r\n\t\turlRequest.httpMethod = method\r\n\t\tif let acc" +
                    "essToken = accessToken {\r\n\t\t\turlRequest.addValue(\"Bearer \\(accessToken)\", forHTT" +
                    "PHeaderField: \"Authorization\")\r\n\t\t}\r\n\t\turlRequest.setValue(\"application/json\", f" +
                    "orHTTPHeaderField: \"Content-Type\")\r\n\t\treturn urlRequest\r\n\t}\r\n\t\r\n\tprivate func pr" +
                    "ocessNetworkResponse<TResponse: Decodable>(urlRequest: URLRequest, data: Data?, " +
                    "response: URLResponse?, error: Error?, callback: ((TResponse?, Error?) -> Void))" +
                    " {\r\n\t\tlet responseString = data != nil ? String(data: data!, encoding: .utf8) : " +
                    "nil\r\n\t\tlet statusCode = (response as! HTTPURLResponse).statusCode\r\n\t\tif configur" +
                    "ation.printResponse {\r\n\t\t\tprint(\"Request to \\(urlRequest.url!.absoluteString) co" +
                    "mpleted with status code=\\(statusCode)\\(responseString != nil ? \", body=\" + resp" +
                    "onseString! : \"\")\")\r\n\t\t}\r\n\t\tvar responseObject: TResponse?\r\n\t\tvar currentError: " +
                    "Error? = error\r\n\t\tif currentError == nil {\r\n\t\t\tdo {\r\n\t\t\t\tresponseObject = try Ba" +
                    "seApiNetworkClient.getDefaultDecoder().decode(TResponse.self, from: data!)\r\n\t\t\t}" +
                    " catch {\r\n\t\t\t\tcurrentError = error\r\n\t\t\t\tif statusCode >= 300 {\r\n\t\t\t\t\tcurrentErro" +
                    "r = HttpRequestError(url: urlRequest.url!.absoluteString, statusCode: statusCode" +
                    ", response: responseString)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcallback(responseObject, curren" +
                    "tError)\r\n\t}\r\n\t\r\n\tfunc buildQueryAddress(pattern: String, queryParameters: [(name" +
                    ": String, value: String?)]) -> String {\r\n\t\tvar queryString = \"\"\r\n\t\tvar segments " +
                    "= pattern.split(separator: \"/\").map { String($0) }\r\n\t\tqueryParameters.forEach { " +
                    "(name, value) in\r\n\t\t\tguard let value = value, let encodedName = name.addingPerce" +
                    "ntEncoding(withAllowedCharacters: CharacterSet.urlQueryAllowed), let encodedValu" +
                    "e = value.addingPercentEncoding(withAllowedCharacters: CharacterSet.urlQueryAllo" +
                    "wed) else {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tif let segmentIndex = segments.firstIndex(of: " +
                    "\"{\\(name)}\") {\r\n\t\t\t\tsegments[segmentIndex] = encodedValue\r\n\t\t\t} else {\r\n\t\t\t\tquer" +
                    "yString.append(contentsOf: (queryString.isEmpty ? \"?\" : \"&\") + encodedName + \"=\"" +
                    " + encodedValue)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn segments.joined(separator: \"/\") + queryStr" +
                    "ing\r\n\t}\r\n\t\r\n\tprivate static func getDefaultEncoder() -> JSONEncoder {\r\n\t\tlet res" +
                    "ult = JSONEncoder()\r\n\t\tresult.dateEncodingStrategy = .custom { (date, encoder) i" +
                    "n\r\n\t\t\tvar container = encoder.singleValueContainer()\r\n\t\t\ttry container.encode(In" +
                    "t64(date.timeIntervalSince1970 * 1000))\r\n\t\t}\r\n\t\tresult.dataEncodingStrategy = .b" +
                    "ase64\r\n\t\treturn result\r\n\t}\r\n\t\r\n\tpublic static func serialize<T>(_ value: T) thro" +
                    "ws -> String where T: Encodable {\r\n\t\tlet data = try getDefaultEncoder().encode(v" +
                    "alue)\r\n\t\tguard let result = String(data: data, encoding: .utf8) else {\r\n\t\t\tthrow" +
                    " CustomError(message: \"Error when converting data to utf-8\")\r\n\t\t}\r\n\t\treturn resu" +
                    "lt\r\n\t}\r\n\r\n\tprivate static func getDefaultDecoder() -> JSONDecoder {\r\n\t\tlet resul" +
                    "t = JSONDecoder()\r\n\t\tresult.dateDecodingStrategy = .millisecondsSince1970\r\n\t\tres" +
                    "ult.dataDecodingStrategy = .base64\r\n\t\treturn result\r\n\t}\r\n\t\r\n\tpublic static func " +
                    "deserialize<T>(_ type: T.Type, from s: String) throws -> T where T: Decodable {\r" +
                    "\n\t\tguard let data = s.data(using: .utf8) else {\r\n\t\t\tthrow CustomError(message: \"" +
                    "Error when converting data to utf-8\")\r\n\t\t}\r\n\t\treturn try getDefaultDecoder().dec" +
                    "ode(T.self, from: data)\r\n\t}\r\n\t\t\r\n\tprivate func executeCallbackOnMainThread<TResp" +
                    "onse>(_ callback: ((TResponse?, Error?) -> Void)?, response: TResponse?, error: " +
                    "Error?) {\r\n\t\tDispatchQueue.main.async {\r\n\t\t\tcallback?(response, error)\r\n\t\t}\r\n\t}\r" +
                    "\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 190 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Ios\BaseApiNetworkClientTemplate.tt"

	private IosConverter converter;
	internal BaseApiNetworkClientTemplate(IosConverter converter)
	{
		this.converter = converter;
	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal class BaseApiNetworkClientTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
