<#@ template visibility="internal" #>
<#@ import namespace="CodeGeneration.ApiClientsCodeGenerator.Converters.Flutter" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	foreach (var item in imports)
	{
#>
import "<#= item #>";
<#
	}
#>

part '<#= converter.GetTypeName(type, false, includeGenericParameters: false).ToSnakeCase(false) #>.g.dart';

<#
	var members = type.GetDataMembers().ToArray();
	var constructorParams = members.Select(item => (converter.GetClassPropertyTypeName(item).EndsWith('?') ? "" : "required ") + "this." + item.Name.ToCamelCase());
#>
@JsonSerializable()
class <#= converter.GetTypeName(type, false) #> {
<#
	foreach (var member in members)
	{
        var typeName = converter.GetClassPropertyTypeName(member);
		var converterAnnotation = typeName switch {
			"Uint8List" => "@Uint8ListConverter() ",
			"Uint8List?" => "@NullableUint8ListConverter() ",
			"DateTime" => "@DateTimeUnixConverter() ",
			"DateTime?" => "@NullableDateTimeUnixConverter() ",
			"List<DateTime>" => "@DateTimeListUnixConverter() ",
			"List<DateTime>?" => "@NullableDateTimeListUnixConverter() ",
			_ => ""
		};
#>
  <#= converterAnnotation #><#= typeName #> <#= member.Name.ToCamelCase() #>;

<#
	}
#>
  <#= converter.GetTypeName(type, false, includeGenericParameters: false) #>(<#= constructorParams.Any() ? "{" + string.Join(", ", constructorParams) + "}" : "" #>);

  factory <#= converter.GetTypeName(type, false, includeGenericParameters: false) #>.fromJson(dynamic json<#= type.GetGenericArguments().Any() ? ", " + string.Join(", ", type.GetGenericArguments().Select(arg => $"{arg.Name} Function(Object? json) fromJson{arg.Name}")) : ""  #>) => _$<#= converter.GetTypeName(type, false, includeGenericParameters: false) #>FromJson(json<#= type.GetGenericArguments().Any() ? ", " + string.Join(", ", type.GetGenericArguments().Select(arg => $"fromJson{arg.Name}")) : "" #>);

  Map<String, dynamic> toJson(<#= string.Join(", ", type.GetGenericArguments().Select(arg => $"Object? Function({arg.Name} value) toJson{arg.Name}")) #>) => _$<#= converter.GetTypeName(type, false, includeGenericParameters: false) #>ToJson(this<#= type.GetGenericArguments().Any() ? ", " + string.Join(", ", type.GetGenericArguments().Select(arg => $"toJson{arg.Name}")) : "" #>);
}
<#+
	private FlutterConverter converter;
	private Type type;
	private List<string> imports;
	internal ClassTemplate(FlutterConverter converter, Type type, IEnumerable<string> imports)
	{
		this.converter = converter;
		this.type = type;
		this.imports = new List<string> { "package:json_annotation/json_annotation.dart" };
		if (type.GetDataMembers().Any(member => member.PropertyType == typeof(DateTime) || member.PropertyType == typeof(DateTime?) && !member.CanBeNull())) {
			this.imports.Add($"package:{converter.Settings.PackageName}/src/{converter.Settings.ApiClientsFolder}/network/converters/date_time_unix_converter.dart");
		}
		if (type.GetDataMembers().Any(member => member.PropertyType == typeof(DateTime?) && member.CanBeNull())) {
			this.imports.Add($"package:{converter.Settings.PackageName}/src/{converter.Settings.ApiClientsFolder}/network/converters/nullable_date_time_unix_converter.dart");
		}
		if (type.GetDataMembers().Any(member => typeof(IEnumerable<byte>).IsAssignableFrom(member.PropertyType) && !member.CanBeNull())) {
			this.imports.Add($"package:{converter.Settings.PackageName}/src/{converter.Settings.ApiClientsFolder}/network/converters/uint8_list_converter.dart");
		}
		if (type.GetDataMembers().Any(member => typeof(IEnumerable<byte>).IsAssignableFrom(member.PropertyType) && member.CanBeNull())) {
			this.imports.Add($"package:{converter.Settings.PackageName}/src/{converter.Settings.ApiClientsFolder}/network/converters/nullable_uint8_list_converter.dart");
		}
		if (type.GetDataMembers().Any(member => typeof(IEnumerable<DateTime>).IsAssignableFrom(member.PropertyType) && !member.CanBeNull())) {
			this.imports.Add($"package:{converter.Settings.PackageName}/src/{converter.Settings.ApiClientsFolder}/network/converters/date_time_list_unix_converter.dart");
		}
		if (type.GetDataMembers().Any(member => typeof(IEnumerable<DateTime>).IsAssignableFrom(member.PropertyType) && member.CanBeNull())) {
			this.imports.Add($"package:{converter.Settings.PackageName}/src/{converter.Settings.ApiClientsFolder}/network/converters/nullable_date_time_list_unix_converter.dart");
		}
		this.imports.AddRange(imports);
		this.imports.Sort();
	}
#>