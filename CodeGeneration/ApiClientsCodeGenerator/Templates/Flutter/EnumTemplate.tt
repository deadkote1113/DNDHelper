<#@ template visibility="internal" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="CodeGeneration.ApiClientsCodeGenerator.Converters.Flutter" #>
import 'package:json_annotation/json_annotation.dart';

part '<#= converter.GetTypeName(type, false, includeGenericParameters: false).ToSnakeCase(false) #>.g.dart';

@JsonEnum(alwaysCreate: true)
enum <#= converter.GetTypeName(type) #> {
<#
	var values = type.GetEnumValues().Cast<Enum>().ToArray();
	for (var i = 0; i < values.Length; ++i)
	{
#>
  @JsonValue('<#= values[i].ToString() #>')
  <#= values[i].ToString().ToCamelCase() #><#= i < values.Length - 1 ? "," : "" #>
<#
		if (i < values.Length - 1) 
		{
#>

<#
		}
#>
<#
	}
#>
}

extension <#= converter.GetTypeName(type) #>Extensions on <#= converter.GetTypeName(type) #> {
  String get jsonValue => _$<#= converter.GetTypeName(type) #>EnumMap[this]!;
}
<#+
	private FlutterConverter converter;
	private Type type;
	internal EnumTemplate(FlutterConverter converter, Type type)
	{
		this.converter = converter;
		this.type = type;
	}
#>