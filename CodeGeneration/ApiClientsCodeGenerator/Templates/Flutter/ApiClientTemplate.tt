<#@ template visibility="internal" #>
<#@ import namespace="CodeGeneration.ApiClientsCodeGenerator.Converters.Flutter" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	foreach (var item in imports)
	{
#>
import "<#= item #>";
<#
	}
#>

abstract class <#= type.GetControllerName() #>ApiClient {
<#
	var methods = type.GetControllerActions();
	for (var i = 0; i < methods.Count; ++i)
	{
		var parametersList = methods[i].GetParameters().Select(item => "required " + converter.GetTypeName(item.ParameterType, item.CanBeNull(), item.ParameterType.CanGenericArgumentsBeNull()) + " " + item.Name).ToList();
		parametersList.Add("required String" + (methods[i].IsAuthorizationRequired() ? "" : "?") + " accessToken");
		var returnTypeName = converter.GetTypeName(methods[i].GetActionResponseType(), false, methods[i].GetActionResponseType().CanGenericArgumentsBeNull());
#>
  Future<<#= returnTypeName #>> <#= methods[i].Name.ToCamelCase() #>({<#= string.Join(", ", parametersList) #>});
<#
		if (i < methods.Count - 1) 
		{
#>

<#
		}
#>
<#
	}
#>
}
<#+
	private FlutterConverter converter;
	private Type type;
	private List<string> imports;
	internal ApiClientTemplate(FlutterConverter converter, Type type, IEnumerable<string> imports)
	{
		this.converter = converter;
		this.type = type;
		this.imports = imports.ToList();
	}
#>