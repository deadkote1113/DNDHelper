// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGeneration.ApiClientsCodeGenerator.Templates.Flutter
{
    using CodeGeneration.ApiClientsCodeGenerator.Converters.Flutter;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\BaseApiNetworkClientTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal partial class BaseApiNetworkClientTemplate : BaseApiNetworkClientTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("import \"dart:convert\";\r\nimport \"package:flutter/foundation.dart\";\r\nimport \"packag" +
                    "e:http/http.dart\" as http;\r\nimport \"api_network_client_configuration.dart\";\r\nimp" +
                    "ort \'other/http_request_exception.dart\';\r\n\r\nclass BaseApiNetworkClient {\r\n  fina" +
                    "l ApiNetworkClientConfiguration configuration;\r\n\r\n  BaseApiNetworkClient([ApiNet" +
                    "workClientConfiguration? configuration])\r\n      : configuration = configuration " +
                    "?? ApiNetworkClientConfiguration.main;\r\n\r\n  Future<TResponse> makeRequest<TReque" +
                    "st, TResponse>(\r\n      String method,\r\n      String relativeUrl,\r\n      TRequest" +
                    "? request,\r\n      dynamic Function(TRequest)? toRequestJson,\r\n      TResponse Fu" +
                    "nction(dynamic) fromResponseJson,\r\n      String? accessToken) async {\r\n    final" +
                    " url = Uri.parse(configuration.getRequestAddress(relativeUrl));\r\n    final reque" +
                    "stBody =\r\n        request != null && toRequestJson != null ? jsonEncode(await co" +
                    "mpute(toRequestJson, request)) : null;\r\n    if (configuration.printRequest) {\r\n " +
                    "     debugPrint(\"Sending $method request to $url, body=$requestBody\");\r\n    }\r\n " +
                    "   var headers = {\'Content-Type\': \'application/json\', \'Cache-Control\': \'no-cache" +
                    "\'};\r\n    if (accessToken != null) {\r\n      headers[\"Authorization\"] = \"Bearer $a" +
                    "ccessToken\";\r\n    }\r\n    var httpRequest = http.Request(method, url);\r\n    if (r" +
                    "equestBody != null) {\r\n      httpRequest.body = requestBody;\r\n    }\r\n    httpReq" +
                    "uest.headers.addAll(headers);\r\n    final response = await http.Response.fromStre" +
                    "am(await httpRequest.send());\r\n    if (configuration.printResponse) {\r\n      deb" +
                    "ugPrint(\"Request to $url completed with status code ${response.statusCode}, body" +
                    "=${response.body}\");\r\n    }\r\n    try {\r\n      final responseMap = jsonDecode(res" +
                    "ponse.body);\r\n      return await compute(fromResponseJson, responseMap);\r\n    } " +
                    "catch (ex) {\r\n      if (response.statusCode >= 300) {\r\n        throw HttpRequest" +
                    "Exception(url.toString(), response.statusCode, response.body);\r\n      }\r\n      r" +
                    "ethrow;\r\n    }\r\n  }\r\n\r\n  String buildQueryAddress(String pattern, List<MapEntry<" +
                    "String, String?>> queryParameters) {\r\n    var queryString = \"\";\r\n    final segme" +
                    "nts = pattern.split(\'/\');\r\n    for (final item in queryParameters) {\r\n      if (" +
                    "item.value == null) {\r\n        continue;\r\n      }\r\n      final segmentIndex = se" +
                    "gments.indexOf(\"{${item.key}}\");\r\n      final encodedName = Uri.encodeComponent(" +
                    "item.key);\r\n      final encodedValue = Uri.encodeComponent(item.value!);\r\n      " +
                    "if (segmentIndex != -1) {\r\n        segments[segmentIndex] = encodedValue;\r\n     " +
                    " } else {\r\n        queryString += (queryString.isEmpty ? \"?\" : \"&\") + encodedNam" +
                    "e + \"=\" + encodedValue;\r\n      }\r\n    }\r\n    return segments.join(\"/\") + querySt" +
                    "ring;\r\n  }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 71 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\BaseApiNetworkClientTemplate.tt"

	private FlutterConverter converter;
	internal BaseApiNetworkClientTemplate(FlutterConverter converter)
	{
		this.converter = converter;
	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal class BaseApiNetworkClientTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
