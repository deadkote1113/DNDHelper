// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGeneration.ApiClientsCodeGenerator.Templates.Flutter
{
    using CodeGeneration.ApiClientsCodeGenerator.Converters.Flutter;
    using System.Linq;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal partial class ClassTemplate : ClassTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 5 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"

	foreach (var item in imports)
	{

            
            #line default
            #line hidden
            this.Write("import \"");
            
            #line 9 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("\";\r\n");
            
            #line 10 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"

	}

            
            #line default
            #line hidden
            this.Write("\r\npart \'");
            
            #line 14 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(converter.GetTypeName(type, false, includeGenericParameters: false).ToSnakeCase(false)));
            
            #line default
            #line hidden
            this.Write(".g.dart\';\r\n\r\n");
            
            #line 16 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"

	var members = type.GetDataMembers().ToArray();
	var constructorParams = members.Select(item => (converter.GetClassPropertyTypeName(item).EndsWith('?') ? "" : "required ") + "this." + item.Name.ToCamelCase());

            
            #line default
            #line hidden
            this.Write("@JsonSerializable()\r\nclass ");
            
            #line 21 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(converter.GetTypeName(type, false)));
            
            #line default
            #line hidden
            this.Write(" {\r\n");
            
            #line 22 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"

	foreach (var member in members)
	{
        var typeName = converter.GetClassPropertyTypeName(member);
		var converterAnnotation = typeName switch {
			"Uint8List" => "@Uint8ListConverter() ",
			"Uint8List?" => "@NullableUint8ListConverter() ",
			"DateTime" => "@DateTimeUnixConverter() ",
			"DateTime?" => "@NullableDateTimeUnixConverter() ",
			"List<DateTime>" => "@DateTimeListUnixConverter() ",
			"List<DateTime>?" => "@NullableDateTimeListUnixConverter() ",
			_ => ""
		};

            
            #line default
            #line hidden
            this.Write("  ");
            
            #line 36 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(converterAnnotation));
            
            #line default
            #line hidden
            
            #line 36 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 36 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 38 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"

	}

            
            #line default
            #line hidden
            this.Write("  ");
            
            #line 41 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(converter.GetTypeName(type, false, includeGenericParameters: false)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 41 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(constructorParams.Any() ? "{" + string.Join(", ", constructorParams) + "}" : ""));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n  factory ");
            
            #line 43 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(converter.GetTypeName(type, false, includeGenericParameters: false)));
            
            #line default
            #line hidden
            this.Write(".fromJson(dynamic json");
            
            #line 43 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.GetGenericArguments().Any() ? ", " + string.Join(", ", type.GetGenericArguments().Select(arg => $"{arg.Name} Function(Object? json) fromJson{arg.Name}")) : ""));
            
            #line default
            #line hidden
            this.Write(") => _$");
            
            #line 43 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(converter.GetTypeName(type, false, includeGenericParameters: false)));
            
            #line default
            #line hidden
            this.Write("FromJson(json");
            
            #line 43 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.GetGenericArguments().Any() ? ", " + string.Join(", ", type.GetGenericArguments().Select(arg => $"fromJson{arg.Name}")) : ""));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n  Map<String, dynamic> toJson(");
            
            #line 45 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", type.GetGenericArguments().Select(arg => $"Object? Function({arg.Name} value) toJson{arg.Name}"))));
            
            #line default
            #line hidden
            this.Write(") => _$");
            
            #line 45 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(converter.GetTypeName(type, false, includeGenericParameters: false)));
            
            #line default
            #line hidden
            this.Write("ToJson(this");
            
            #line 45 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.GetGenericArguments().Any() ? ", " + string.Join(", ", type.GetGenericArguments().Select(arg => $"toJson{arg.Name}")) : ""));
            
            #line default
            #line hidden
            this.Write(");\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 47 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Flutter\ClassTemplate.tt"

	private FlutterConverter converter;
	private Type type;
	private List<string> imports;
	internal ClassTemplate(FlutterConverter converter, Type type, IEnumerable<string> imports)
	{
		this.converter = converter;
		this.type = type;
		this.imports = new List<string> { "package:json_annotation/json_annotation.dart" };
		if (type.GetDataMembers().Any(member => member.PropertyType == typeof(DateTime) || member.PropertyType == typeof(DateTime?) && !member.CanBeNull())) {
			this.imports.Add($"package:{converter.Settings.PackageName}/src/{converter.Settings.ApiClientsFolder}/network/converters/date_time_unix_converter.dart");
		}
		if (type.GetDataMembers().Any(member => member.PropertyType == typeof(DateTime?) && member.CanBeNull())) {
			this.imports.Add($"package:{converter.Settings.PackageName}/src/{converter.Settings.ApiClientsFolder}/network/converters/nullable_date_time_unix_converter.dart");
		}
		if (type.GetDataMembers().Any(member => typeof(IEnumerable<byte>).IsAssignableFrom(member.PropertyType) && !member.CanBeNull())) {
			this.imports.Add($"package:{converter.Settings.PackageName}/src/{converter.Settings.ApiClientsFolder}/network/converters/uint8_list_converter.dart");
		}
		if (type.GetDataMembers().Any(member => typeof(IEnumerable<byte>).IsAssignableFrom(member.PropertyType) && member.CanBeNull())) {
			this.imports.Add($"package:{converter.Settings.PackageName}/src/{converter.Settings.ApiClientsFolder}/network/converters/nullable_uint8_list_converter.dart");
		}
		if (type.GetDataMembers().Any(member => typeof(IEnumerable<DateTime>).IsAssignableFrom(member.PropertyType) && !member.CanBeNull())) {
			this.imports.Add($"package:{converter.Settings.PackageName}/src/{converter.Settings.ApiClientsFolder}/network/converters/date_time_list_unix_converter.dart");
		}
		if (type.GetDataMembers().Any(member => typeof(IEnumerable<DateTime>).IsAssignableFrom(member.PropertyType) && member.CanBeNull())) {
			this.imports.Add($"package:{converter.Settings.PackageName}/src/{converter.Settings.ApiClientsFolder}/network/converters/nullable_date_time_list_unix_converter.dart");
		}
		this.imports.AddRange(imports);
		this.imports.Sort();
	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal class ClassTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
