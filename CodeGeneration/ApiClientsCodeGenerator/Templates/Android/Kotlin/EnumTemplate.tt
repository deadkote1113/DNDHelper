<#@ template visibility="internal" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="Common.Enums" #>
<#@ import namespace="CodeGeneration.ApiClientsCodeGenerator.Converters.Android" #>
package <#= converter.GetPackage(type) #>

import java.io.*
import com.google.gson.annotations.*
import <#= converter.Settings.BasePackage #>.R

enum class <#= converter.GetTypeName(type) #>(val primitiveValue: Int) : Serializable {
<#
	var values = type.GetEnumValues().Cast<Enum>().ToArray();
	for (var i = 0; i < values.Length; ++i)
	{
#>
	@SerializedName("<#= values[i].ToString() #>")
	<#= values[i].ToString().ToSnakeCase() #>(<#= Convert.ChangeType(values[i], values[i].GetTypeCode()) #>) {
		override val displayNameResourceId = R.string.<#= converter.GetEnumResourceName(values[i]) #>
	}<#= i < values.Length - 1 ? "," : ";" #>

<#
	}
#>
	abstract val displayNameResourceId: Int

	companion object {
		fun fromPrimitiveValue(primitiveValue: Int): <#= converter.GetTypeName(type) #>? {
			return enumValues<<#= converter.GetTypeName(type) #>>().firstOrNull { it.primitiveValue == primitiveValue }
		}
	}
}
<#+
	private KotlinAndroidConverter converter;
	private Type type;
	internal EnumTemplate(KotlinAndroidConverter converter, Type type)
	{
		this.converter = converter;
		this.type = type;
	}
#>