<#@ template visibility="internal" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="Common.Enums" #>
<#@ import namespace="CodeGeneration.ApiClientsCodeGenerator.Converters.Android" #>
package <#= converter.GetPackage(type) #>;

import java.io.*;
import com.google.gson.annotations.*;
import <#= converter.Settings.BasePackage #>.R;

public enum <#= converter.GetTypeName(type) #> implements Serializable {
<#
	var values = type.GetEnumValues().Cast<Enum>().ToArray();
	for (var i = 0; i < values.Length; ++i)
	{
#>
	@SerializedName("<#= values[i].ToString() #>")
	<#= values[i].ToString().ToSnakeCase() #>(<#= Convert.ChangeType(values[i], values[i].GetTypeCode()) #>, R.string.<#= converter.GetEnumResourceName(values[i]) #>)<#= i < values.Length - 1 ? "," : ";" #>

<#
	}
#>
	private <#= converter.GetTypeName(Enum.GetUnderlyingType(type)) #> primitiveValue;

	private int displayNameResourceId;

	<#= converter.GetTypeName(type) #>(<#= converter.GetTypeName(Enum.GetUnderlyingType(type)) #> primitiveValue, int displayNameResourceId) {
		this.primitiveValue = primitiveValue;
		this.displayNameResourceId = displayNameResourceId;
	}

	public int getDisplayNameResourceId() {
		return displayNameResourceId;
	}

	public <#= converter.GetTypeName(Enum.GetUnderlyingType(type)) #> toPrimitiveValue() {
		return primitiveValue;
	}

	public static <#= converter.GetTypeName(type) #> fromPrimitiveValue(int primitiveValue) {
		for (<#= converter.GetTypeName(type) #> item: <#= converter.GetTypeName(type) #>.values()) {
			if (item.primitiveValue == primitiveValue) {
				return item;
			}
		}
		return null;
	}
}
<#+
	private JavaAndroidConverter converter;
	private Type type;
	internal EnumTemplate(JavaAndroidConverter converter, Type type)
	{
		this.converter = converter;
		this.type = type;
	}
#>