// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGeneration.ApiClientsCodeGenerator.Templates.Android.Java
{
    using CodeGeneration.ApiClientsCodeGenerator.Converters.Android;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Android\Java\BaseApiNetworkClientTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal partial class BaseApiNetworkClientTemplate : BaseApiNetworkClientTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("package ");
            
            #line 3 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Android\Java\BaseApiNetworkClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(converter.Settings.ApiClientsPackage));
            
            #line default
            #line hidden
            this.Write(@".network;

import java.io.*;
import java.lang.reflect.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.*;
import android.os.*;
import android.text.*;
import android.util.*;
import com.google.gson.*;
import okhttp3.*;
import okhttp3.logging.*;
");
            
            #line 16 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Android\Java\BaseApiNetworkClientTemplate.tt"

	if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Reactive))
	{

            
            #line default
            #line hidden
            this.Write("import io.reactivex.rxjava3.core.Observable;\r\nimport io.reactivex.rxjava3.schedul" +
                    "ers.*;\r\n");
            
            #line 22 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Android\Java\BaseApiNetworkClientTemplate.tt"

	}

            
            #line default
            #line hidden
            this.Write("import ");
            
            #line 25 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Android\Java\BaseApiNetworkClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(converter.Settings.ApiClientsPackage));
            
            #line default
            #line hidden
            this.Write(".network.adapters.*;\r\nimport ");
            
            #line 26 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Android\Java\BaseApiNetworkClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(converter.Settings.ApiClientsPackage));
            
            #line default
            #line hidden
            this.Write(".network.other.*;\r\nimport ");
            
            #line 27 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Android\Java\BaseApiNetworkClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(converter.Settings.ApiClientsPackage));
            
            #line default
            #line hidden
            this.Write(@".interfaces.*;

public class BaseApiNetworkClient {
	private static final OkHttpClient commonHttpClient = new OkHttpClient();

	protected ApiNetworkClientConfiguration configuration;

	public BaseApiNetworkClient(ApiNetworkClientConfiguration configuration) {
		this.configuration = configuration != null ? configuration : ApiNetworkClientConfiguration.getDefault();
	}

");
            
            #line 38 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Android\Java\BaseApiNetworkClientTemplate.tt"

	if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Asynchronous))
	{

            
            #line default
            #line hidden
            this.Write(@"	protected <TRequest, TResponse> void makeRequestAsync(String method, String relativeUrl, TRequest request, final Type requestType, final Type responseType, String accessToken, final RequestCallback<TResponse> callback) {
		final OkHttpClient httpClient = getHttpClient();
		Request networkRequest = prepareNetworkRequest(method, relativeUrl, request, requestType, accessToken);
		httpClient.newCall(networkRequest).enqueue(new Callback() {
			@Override
			public void onFailure(Call call, IOException ex) {
				executeCallbackOnMainThread(callback, null, ex);
			}

			@Override
			public void onResponse(Call call, Response networkResponse) throws IOException {
				TResponse response = null;
				boolean wasError = false;
				try {
					response = processNetworkResponse(networkResponse, responseType);
				} catch (Exception ex) {
					wasError = true;
					executeCallbackOnMainThread(callback, null, ex);
				}
				if (!wasError) {
					executeCallbackOnMainThread(callback, response, null);
				}
			}
		});
	}

");
            
            #line 68 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Android\Java\BaseApiNetworkClientTemplate.tt"

	}
	if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Reactive))
	{

            
            #line default
            #line hidden
            this.Write(@"	protected <TRequest, TResponse> Observable<TResponse> makeRequestRx(String method, String relativeUrl, TRequest request, final Type requestType, final Type responseType, String accessToken) {
		return Observable.<TResponse>fromCallable(() -> makeRequestSync(method, relativeUrl, request, requestType, responseType, accessToken))
			.subscribeOn(Schedulers.io());
	}

");
            
            #line 78 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Android\Java\BaseApiNetworkClientTemplate.tt"

	}
	if (converter.Settings.ApiClientMethodTypes != ApiClientMethodType.Asynchronous)
	{

            
            #line default
            #line hidden
            this.Write(@"	protected <TRequest, TResponse> TResponse makeRequestSync(String method, String relativeUrl, TRequest request, final Type requestType, final Type responseType, String accessToken) throws Exception {
		final Gson serializer = getSerializer();
		final OkHttpClient httpClient = getHttpClient();
		Request networkRequest = prepareNetworkRequest(method, relativeUrl, request, requestType, accessToken);
		Response networkResponse = httpClient.newCall(networkRequest).execute();
		return processNetworkResponse(networkResponse, responseType);
	}

");
            
            #line 91 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Android\Java\BaseApiNetworkClientTemplate.tt"

	}

            
            #line default
            #line hidden
            this.Write("\tprotected String buildQueryAddress(String pattern, List<Pair<String, String>> qu" +
                    "eryParameters) {\r\n\t\tStringBuilder queryString = new StringBuilder();\r\n\t\tList<Str" +
                    "ing> segments = Arrays.asList(pattern.split(\"/\"));\r\n\t\tfor (Pair<String, String> " +
                    "parameter: queryParameters) {\r\n\t\t\tif (parameter.second == null) {\r\n\t\t\t\tcontinue;" +
                    "\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tint segmentIndex = segments.indexOf(\"{${name}}\");\r\n\t\t\t\tif " +
                    "(segmentIndex != -1) {\r\n\t\t\t\t\tsegments.set(segmentIndex, URLEncoder.encode(parame" +
                    "ter.second, \"utf-8\"));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tqueryString.append((queryString.lengt" +
                    "h() == 0 ? \"?\" : \"&\") + URLEncoder.encode(parameter.first, \"utf-8\") + \"=\" + URLE" +
                    "ncoder.encode(parameter.second, \"utf-8\"));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (UnsupportedEn" +
                    "codingException ignored) {\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn TextUtils.join(\"/\", segments) " +
                    "+ queryString;\r\n\t}\r\n\r\n\tprivate <TResponse> void executeCallbackOnMainThread(Requ" +
                    "estCallback<TResponse> callback, TResponse response, Exception ex) {\r\n\t\tnew Hand" +
                    "ler(Looper.getMainLooper()).post(() -> callback.handle(response, ex));\r\n\t}\r\n\r\n\tp" +
                    "rivate OkHttpClient getHttpClient() {\r\n\t\treturn commonHttpClient.newBuilder()\r\n\t" +
                    "\t\t.addInterceptor(new HttpLoggingInterceptor().setLevel(configuration.getEnableL" +
                    "ogging() ? HttpLoggingInterceptor.Level.BODY : HttpLoggingInterceptor.Level.NONE" +
                    "))\r\n\t\t\t.connectTimeout(configuration.getTimeoutSeconds(), TimeUnit.SECONDS)\r\n\t\t\t" +
                    ".writeTimeout(configuration.getTimeoutSeconds(), TimeUnit.SECONDS)\r\n\t\t\t.readTime" +
                    "out(configuration.getTimeoutSeconds(), TimeUnit.SECONDS)\r\n\t\t\t.build();\r\n\t}\r\n\r\n\tp" +
                    "rivate static Gson getSerializer() {\r\n\t\tGsonBuilder builder = new GsonBuilder()\r" +
                    "\n\t\t\t.registerTypeAdapter(Date.class, new UnixDateAdapter())\r\n\t\t\t.registerTypeAda" +
                    "pter(byte[].class, new ByteArrayAdapter());\r\n\t\treturn builder.create();\r\n\t}\r\n\r\n\t" +
                    "public static String serialize(Object value) {\r\n\t\treturn getSerializer().toJson(" +
                    "value);\r\n\t}\r\n\r\n\tpublic static String serialize(Object value, final Type type) {\r" +
                    "\n\t\treturn getSerializer().toJson(value, type);\r\n\t}\r\n\r\n\tpublic static <T> T deser" +
                    "ialize(String s, final Type type) {\r\n\t\treturn getSerializer().fromJson(s, type);" +
                    "\r\n\t}\r\n\r\n\tprivate <TRequest> Request prepareNetworkRequest(String method, String " +
                    "relativeUrl, TRequest request, final Type requestType, String accessToken) {\r\n\t\t" +
                    "RequestBody requestBody = RequestBody.create(request == null || requestType == n" +
                    "ull ? \"\" : serialize(request, requestType), MediaType.parse(\"application/json; c" +
                    "harset=utf-8\"));\r\n\t\tRequest.Builder builder = new Request.Builder()\r\n\t\t\t.url(con" +
                    "figuration.getRequestAddress(relativeUrl))\r\n\t\t\t.method(method, method.equals(\"GE" +
                    "T\") || method.equals(\"DELETE\") ? null : requestBody)\r\n\t\t\t.cacheControl(CacheCont" +
                    "rol.FORCE_NETWORK);\r\n\t\tif (accessToken != null) {\r\n\t\t\tbuilder = builder.addHeade" +
                    "r(\"Authorization\", \"Bearer \" + accessToken);\r\n\t\t}\r\n\t\treturn builder.build();\r\n\t}" +
                    "\r\n\r\n\tprivate <TResponse> TResponse processNetworkResponse(Response response, fin" +
                    "al Type responseType) throws Exception {\r\n\t\tString responseBody = response.body(" +
                    ") != null ? response.body().string() : \"\";\r\n\t\ttry {\r\n\t\t\tTResponse result = deser" +
                    "ialize(responseBody, responseType);\r\n\t\t\tif (result == null) {\r\n\t\t\t\tthrow new Ill" +
                    "egalArgumentException(\"Can not deserialize response body\");\r\n\t\t\t}\r\n\t\t\treturn res" +
                    "ult;\r\n\t\t}\r\n\t\tcatch (Exception ex) {\r\n\t\t\tif (!response.isSuccessful()) {\r\n\t\t\t\tthr" +
                    "ow new HttpRequestException(response.request().url().toString(), response.code()" +
                    ", responseBody);\r\n\t\t\t}\r\n\t\t\tthrow ex;\r\n\t\t}\r\n\t}\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 177 "E:\reps\MyFfin\CodeGeneration\ApiClientsCodeGenerator\Templates\Android\Java\BaseApiNetworkClientTemplate.tt"

	private JavaAndroidConverter converter;
	internal BaseApiNetworkClientTemplate(JavaAndroidConverter converter)
	{
		this.converter = converter;
	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal class BaseApiNetworkClientTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
