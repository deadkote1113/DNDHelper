<#@ template visibility="internal" #>
<#@ import namespace="CodeGeneration.ApiClientsCodeGenerator.Converters.Android" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
package <#= converter.GetPackage(type) #>.interfaces;

<#
	foreach (var item in imports)
	{
#>
import <#= item #>;
<#
	}
#>


public interface <#= type.GetControllerName() #>ApiClient {
<#
	var methods = type.GetControllerActions();
	for (var i = 0; i < methods.Count; ++i)
	{
		var parametersList = methods[i].GetParameters().Select(item => converter.GetTypeName(item.ParameterType) + " " + item.Name).ToList();
		parametersList.Add("String accessToken");
		var responseTypeName = converter.GetTypeName(methods[i].GetActionResponseType());
		if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Asynchronous))
		{
#>
	void <#= methods[i].Name.ToCamelCase() #>(<#= string.Join(", ", parametersList) #>, RequestCallback<<#= responseTypeName #>> callback);<#= converter.Settings.ApiClientMethodTypes != ApiClientMethodType.Asynchronous ? "\r\n" : "" #>
<#
		}
		if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Reactive))
		{
#>
	Observable<<#= responseTypeName #>> <#= methods[i].Name.ToCamelCase() #>Rx(<#= string.Join(", ", parametersList) #>) throws Exception;<#= converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Synchronous) ? "\r\n" : "" #>
<#
		}
		if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Synchronous))
		{
#>
	<#= responseTypeName #> <#= methods[i].Name.ToCamelCase() #>Sync(<#= string.Join(", ", parametersList) #>) throws Exception;
<#
		}
		if (i < methods.Count - 1) 
		{
#>

<#
		}
#>
<#
	}
#>
}
<#+
	private JavaAndroidConverter converter;
	private Type type;
	private List<string> imports;
	internal ApiClientTemplate(JavaAndroidConverter converter, Type type, IEnumerable<string> imports) 
	{
		this.converter = converter;
		this.type = type;
		this.imports = new List<string>
		{
			"java.util.*", "java.math.*", "java.lang.*", "java.lang.reflect.*", "android.util.*"
		};
		if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Reactive))
		{
			this.imports.Add("io.reactivex.rxjava3.core.Observable");
		}
		this.imports.AddRange(imports);
	}
#>