<#@ template visibility="internal" #>
<#@ import namespace="CodeGeneration.ApiClientsCodeGenerator.Converters.Android" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
package <#= converter.GetPackage(type) #>.network;

<#
	foreach (var item in imports)
	{
#>
import <#= item #>;
<#
	}
#>

public class <#= type.GetControllerName() #>ApiNetworkClient extends BaseApiNetworkClient implements <#= type.GetControllerName() #>ApiClient {
	public <#= type.GetControllerName() #>ApiNetworkClient() {
		this(null);
	}

	public <#= type.GetControllerName() #>ApiNetworkClient(ApiNetworkClientConfiguration configuration) {
		super(configuration);
	}

<#
	var methods = type.GetControllerActions();
	for (var i = 0; i < methods.Count; ++i)
	{
		var parametersList = methods[i].GetParameters().Select(item => converter.GetTypeName(item.ParameterType) + " " + item.Name).ToList();
		parametersList.Add("String accessToken");
		var bodyParameter = methods[i].GetActionBodyParameter();
		var bodyParameterTypeName = bodyParameter != null ? converter.GetTypeName(bodyParameter.ParameterType) : null;
		var queryParameters = methods[i].GetActionQueryParameters();
		var responseTypeName = converter.GetTypeName(methods[i].GetActionResponseType());
		var address = queryParameters.Any() ? $"buildQueryAddress(\"{methods[i].GetActionUrl()}\", queryParameters)" : $"\"{methods[i].GetActionUrl()}\"";
		if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Asynchronous))
		{
#>
	public void <#= methods[i].Name.ToCamelCase() #>(<#= string.Join(", ", parametersList) #>, RequestCallback<<#= responseTypeName #>> callback) {
<#
		if (queryParameters.Any()) 
		{
#>
		<#= converter.GetActionQueryParametersString(queryParameters).Replace("\r\n", "\r\n\t\t") #>
<#
		}
		if (bodyParameter != null) 
		{
#>
		Type requestType = new TypeToken<<#= bodyParameterTypeName #>>() { }.getType();
<#
		}
#>
		Type responseType = new TypeToken<<#= responseTypeName #>>() { }.getType();
		makeRequestAsync("<#= methods[i].GetActionHttpMethod() #>", <#= address #>, <#= bodyParameter != null ? bodyParameter.Name + ", requestType" : "null, null" #>, responseType, accessToken, callback);
	}<#= converter.Settings.ApiClientMethodTypes != ApiClientMethodType.Asynchronous ? "\r\n" : "" #>
<#
		}
		if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Reactive))
		{
#>
	public Observable<<#= responseTypeName #>> <#= methods[i].Name.ToCamelCase() #>Rx(<#= string.Join(", ", parametersList) #>) throws Exception {
<#
		if (queryParameters.Any()) 
		{
#>
		<#= converter.GetActionQueryParametersString(queryParameters).Replace("\r\n", "\r\n\t\t") #>
<#
		}
		if (bodyParameter != null) 
		{
#>
		Type requestType = new TypeToken<<#= bodyParameterTypeName #>>() { }.getType();
<#
		}
#>
		Type responseType = new TypeToken<<#= responseTypeName #>>() { }.getType();
		return makeRequestRx("<#= methods[i].GetActionHttpMethod() #>", <#= address #>, <#= bodyParameter != null ? bodyParameter.Name + ", requestType" : "null, null" #>, responseType, accessToken);
	}<#= converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Synchronous) ? "\r\n" : "" #>
<#
		}
		if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Synchronous))
		{
#>
	public <#= responseTypeName #> <#= methods[i].Name.ToCamelCase() #>Sync(<#= string.Join(", ", parametersList) #>) throws Exception {
<#
		if (queryParameters.Any()) 
		{
#>
		<#= converter.GetActionQueryParametersString(queryParameters).Replace("\r\n", "\r\n\t\t") #>
<#
		}
		if (bodyParameter != null) 
		{
#>
		Type requestType = new TypeToken<<#= bodyParameterTypeName #>>() { }.getType();
<#
		}
#>
		Type responseType = new TypeToken<<#= responseTypeName #>>() { }.getType();
		return makeRequestSync("<#= methods[i].GetActionHttpMethod() #>", <#= address #>, <#= bodyParameter != null ? bodyParameter.Name + ", requestType" : "null, null" #>, responseType, accessToken);
	}
<#
		}
		if (i < methods.Count - 1) 
		{
#>

<#
		}
#>
<#
	}
#>
}
<#+
	private JavaAndroidConverter converter;
	private Type type;
	private List<string> imports;
	internal ApiNetworkClientTemplate(JavaAndroidConverter converter, Type type, IEnumerable<string> imports) 
	{
		this.converter = converter;
		this.type = type;
		this.imports = new List<string>
		{
			"java.util.*", "java.math.*", "java.lang.*", "java.lang.reflect.*", "java.text.*", "android.util.*", "com.google.gson.reflect.*"
		};
		if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Reactive))
		{
			this.imports.Add("io.reactivex.rxjava3.core.Observable");
		}
		this.imports.Add(converter.Settings.ApiClientsPackage + ".interfaces.*");
		this.imports.AddRange(imports);
	}
#>