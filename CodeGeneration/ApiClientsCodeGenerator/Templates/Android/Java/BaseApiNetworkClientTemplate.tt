<#@ template visibility="internal" #>
<#@ import namespace="CodeGeneration.ApiClientsCodeGenerator.Converters.Android" #>
package <#= converter.Settings.ApiClientsPackage #>.network;

import java.io.*;
import java.lang.reflect.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.*;
import android.os.*;
import android.text.*;
import android.util.*;
import com.google.gson.*;
import okhttp3.*;
import okhttp3.logging.*;
<#
	if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Reactive))
	{
#>
import io.reactivex.rxjava3.core.Observable;
import io.reactivex.rxjava3.schedulers.*;
<#
	}
#>
import <#= converter.Settings.ApiClientsPackage #>.network.adapters.*;
import <#= converter.Settings.ApiClientsPackage #>.network.other.*;
import <#= converter.Settings.ApiClientsPackage #>.interfaces.*;

public class BaseApiNetworkClient {
	private static final OkHttpClient commonHttpClient = new OkHttpClient();

	protected ApiNetworkClientConfiguration configuration;

	public BaseApiNetworkClient(ApiNetworkClientConfiguration configuration) {
		this.configuration = configuration != null ? configuration : ApiNetworkClientConfiguration.getDefault();
	}

<#
	if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Asynchronous))
	{
#>
	protected <TRequest, TResponse> void makeRequestAsync(String method, String relativeUrl, TRequest request, final Type requestType, final Type responseType, String accessToken, final RequestCallback<TResponse> callback) {
		final OkHttpClient httpClient = getHttpClient();
		Request networkRequest = prepareNetworkRequest(method, relativeUrl, request, requestType, accessToken);
		httpClient.newCall(networkRequest).enqueue(new Callback() {
			@Override
			public void onFailure(Call call, IOException ex) {
				executeCallbackOnMainThread(callback, null, ex);
			}

			@Override
			public void onResponse(Call call, Response networkResponse) throws IOException {
				TResponse response = null;
				boolean wasError = false;
				try {
					response = processNetworkResponse(networkResponse, responseType);
				} catch (Exception ex) {
					wasError = true;
					executeCallbackOnMainThread(callback, null, ex);
				}
				if (!wasError) {
					executeCallbackOnMainThread(callback, response, null);
				}
			}
		});
	}

<#
	}
	if (converter.Settings.ApiClientMethodTypes.HasFlag(ApiClientMethodType.Reactive))
	{
#>
	protected <TRequest, TResponse> Observable<TResponse> makeRequestRx(String method, String relativeUrl, TRequest request, final Type requestType, final Type responseType, String accessToken) {
		return Observable.<TResponse>fromCallable(() -> makeRequestSync(method, relativeUrl, request, requestType, responseType, accessToken))
			.subscribeOn(Schedulers.io());
	}

<#
	}
	if (converter.Settings.ApiClientMethodTypes != ApiClientMethodType.Asynchronous)
	{
#>
	protected <TRequest, TResponse> TResponse makeRequestSync(String method, String relativeUrl, TRequest request, final Type requestType, final Type responseType, String accessToken) throws Exception {
		final Gson serializer = getSerializer();
		final OkHttpClient httpClient = getHttpClient();
		Request networkRequest = prepareNetworkRequest(method, relativeUrl, request, requestType, accessToken);
		Response networkResponse = httpClient.newCall(networkRequest).execute();
		return processNetworkResponse(networkResponse, responseType);
	}

<#
	}
#>
	protected String buildQueryAddress(String pattern, List<Pair<String, String>> queryParameters) {
		StringBuilder queryString = new StringBuilder();
		List<String> segments = Arrays.asList(pattern.split("/"));
		for (Pair<String, String> parameter: queryParameters) {
			if (parameter.second == null) {
				continue;
			}
			try {
				int segmentIndex = segments.indexOf("{${name}}");
				if (segmentIndex != -1) {
					segments.set(segmentIndex, URLEncoder.encode(parameter.second, "utf-8"));
				} else {
					queryString.append((queryString.length() == 0 ? "?" : "&") + URLEncoder.encode(parameter.first, "utf-8") + "=" + URLEncoder.encode(parameter.second, "utf-8"));
				}
			}
			catch (UnsupportedEncodingException ignored) {

			}
		}
		return TextUtils.join("/", segments) + queryString;
	}

	private <TResponse> void executeCallbackOnMainThread(RequestCallback<TResponse> callback, TResponse response, Exception ex) {
		new Handler(Looper.getMainLooper()).post(() -> callback.handle(response, ex));
	}

	private OkHttpClient getHttpClient() {
		return commonHttpClient.newBuilder()
			.addInterceptor(new HttpLoggingInterceptor().setLevel(configuration.getEnableLogging() ? HttpLoggingInterceptor.Level.BODY : HttpLoggingInterceptor.Level.NONE))
			.connectTimeout(configuration.getTimeoutSeconds(), TimeUnit.SECONDS)
			.writeTimeout(configuration.getTimeoutSeconds(), TimeUnit.SECONDS)
			.readTimeout(configuration.getTimeoutSeconds(), TimeUnit.SECONDS)
			.build();
	}

	private static Gson getSerializer() {
		GsonBuilder builder = new GsonBuilder()
			.registerTypeAdapter(Date.class, new UnixDateAdapter())
			.registerTypeAdapter(byte[].class, new ByteArrayAdapter());
		return builder.create();
	}

	public static String serialize(Object value) {
		return getSerializer().toJson(value);
	}

	public static String serialize(Object value, final Type type) {
		return getSerializer().toJson(value, type);
	}

	public static <T> T deserialize(String s, final Type type) {
		return getSerializer().fromJson(s, type);
	}

	private <TRequest> Request prepareNetworkRequest(String method, String relativeUrl, TRequest request, final Type requestType, String accessToken) {
		RequestBody requestBody = RequestBody.create(request == null || requestType == null ? "" : serialize(request, requestType), MediaType.parse("application/json; charset=utf-8"));
		Request.Builder builder = new Request.Builder()
			.url(configuration.getRequestAddress(relativeUrl))
			.method(method, method.equals("GET") || method.equals("DELETE") ? null : requestBody)
			.cacheControl(CacheControl.FORCE_NETWORK);
		if (accessToken != null) {
			builder = builder.addHeader("Authorization", "Bearer " + accessToken);
		}
		return builder.build();
	}

	private <TResponse> TResponse processNetworkResponse(Response response, final Type responseType) throws Exception {
		String responseBody = response.body() != null ? response.body().string() : "";
		try {
			TResponse result = deserialize(responseBody, responseType);
			if (result == null) {
				throw new IllegalArgumentException("Can not deserialize response body");
			}
			return result;
		}
		catch (Exception ex) {
			if (!response.isSuccessful()) {
				throw new HttpRequestException(response.request().url().toString(), response.code(), responseBody);
			}
			throw ex;
		}
	}
}
<#+
	private JavaAndroidConverter converter;
	internal BaseApiNetworkClientTemplate(JavaAndroidConverter converter)
	{
		this.converter = converter;
	}
#>